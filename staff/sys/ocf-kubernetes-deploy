#!/usr/bin/env python3
'''
Deploys Kubernetes templates from the given directory. Creates a namespace
based on the app name, and runs kubernetes-deploy.
'''
import argparse
import json
import os
import subprocess
import sys


def get_current_context():
    return subprocess.check_output(
        ['kubectl', 'config', 'current-context']
    ).decode().strip()


def get_kubeconfig_path():
    return os.environ.get('KUBECONFIG', os.path.expanduser('~/.kube/config'))


def main():
    parser = argparse.ArgumentParser(description=__doc__)

    parser.add_argument(
        '--kube-context',
        default=get_current_context(),
        help='The Kubernetes context to use. Defaults to the current context.',
    )

    parser.add_argument(
        'appname',
        help='''
             The name of the app to deploy. The namespace will be called
             "app-{appname}".
        ''',
    )
    parser.add_argument(
        'appversion',
        help='The version of the app, usually the docker tag.',
    )
    parser.add_argument(
        'dir',
        help='The directory of Kubernetes resource templates.',
    )
    args = parser.parse_args()

    # Kubernetes namespaces can't have underscores
    namespace_name = 'app-' + args.appname.replace('_', '-')

    # Make the namepace "app-appname"
    j = {
        'apiVersion': 'v1',
        'kind': 'Namespace',
        'metadata': {'name': namespace_name},
    }
    subprocess.run(
        ['kubectl', 'apply', '-f', '-'],
        input=json.dumps(j).encode(),
    ).check_returncode()

    # Bindings passed into the kubernetes-deploy templates
    bindings = {
        'version': args.appversion,
    }

    # kubernetes-deploy requires that this environmental variable be set, and passes
    # it to templates as the `current_sha` variable. We don't ever use it.
    os.environ['REVISION'] = 'unused'

    subprocess.run(
        ['kubernetes-deploy',
         namespace_name,
         args.kube_context,
         '--bindings=' + json.dumps(bindings),
         '--template-dir=' + args.dir]
    ).check_returncode()


if __name__ == '__main__':
    try:
        sys.exit(main())
    except subprocess.CalledProcessError as err:
        sys.exit(err.returncode)
